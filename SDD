SDD Dependency graph
Lex: 
%{ 
        #include "y.tab.h" 
        #include<math.h> 
%} 
%% 
[0-9]+  {yylval.dval=atof(yytext);return number;} 
LOG     {return LOG;} 
\$;             {return 0;} 
\n|.            {return yytext[0];} 
%% 
 
 
Yacc: 
 
%{ 
        #include<stdio.h> 
        #include<math.h> 
        int count = 0; 
%} 
%union  {double dval;} 
%token  <dval> number LOG 
%type   <dval> E T F 
%left   '+' '-' 
%left   '*' '/' 
%% 
line: E '\n'  {printf("%d) E.val = %.2f\n",count++, $1);}; 
 
E  : E '+' T  {$$=$1+$3; printf("%d) E.val = E.val + T.val = %.2f\n", count++, $$);} 
   | E '-' T  {$$=$1-$3; printf("%d) E.val = E.val - T.val = %.2f\n", count++, $$);} 
   | T        {$$=$1; printf("%d) E.val = T.val = %.2f\n",count++, $$);} 
   ; 
T  : T '' F  {$$=$1$3; printf("%d) T.val = T.val * F.val = %.2f\n", count++, $$);} 
   | T '/' F  {$$=$1/$3; printf("%d) T.val = T.val / F.val = %.2f\n", count++, $$);} 
   | F        {$$=$1; printf("%d) T.val = F.val = %.2f\n", count++, $$);} 
   ; 
F  : number   {$$=$1; printf("%d) F.val = num.lexval = %.2f\n", count++, $$);} 
   ; 
%% 
int main() 
{ 
        yyparse(); 
} 
int yywrap() 
{ 
        return 0; 
} 
void yyerror(char *s) 
{ 
        fprintf(stderr,"%s",s); 
} 
 
 
Output: 
 
3+5*6 
 
0) F.val = num.lexval = 3.00 
1) T.val = F.val = 3.00 
2) E.val = T.val = 3.00 
3) F.val = num.lexval = 5.00 
4) T.val = F.val = 5.00 
5) F.val = num.lexval = 6.00 
6) T.val = T.val * F.val = 30.00 
7) E.val = E.val + T.val = 33.00 
8) E.val = 33.00
